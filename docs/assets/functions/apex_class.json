{
  "title": "APEX CLASS",
  "description": "<p><code>pushtopics.SalesforceDataTransformer</code> is a global interface that enables custom Apex logic within DSP formulas, extending the packageâ€™s out-of-box transformations when built-in functions are insufficient. Reference an implementation in a formula using the placeholder syntax <code>$apexClassName</code>.</p>",
  "descriptionImages" : [
    {
      "src": "assets/transformation-description-img/apex_class/apex_class.jpg",
      "alt": "APEX CLASS"
    }
  ],
  "descriptionCode": "global interface SalesforceDataTransformer {\n    /* Define source fields to be fetched from the source connection and used in the mapper class. */\n    String[] retrieveSourceFields();\n\n    Object transform(List<Map<String, Object>> contextSourceRecords,\n                     Map<String, Object> currentSourceRecord,\n                     String assignedToFieldName);\n}",
  "syntax": "",
  "parameters": [],
  "examples": [
    "global class DescriptionEmailExtractor implements pushtopics.SalesforceDataTransformer {\n\n    private static final Pattern EMAIL_PATTERN = Pattern.compile(\n        '([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,})'\n    );\n\n    global String[] retrieveSourceFields() {\n        return new String[] { 'Description' };\n    }\n\n    global Object transform(\n        List<Map<String, Object>> contextSourceRecords,\n        Map<String, Object> currentSourceRecord,\n        String assignedToFieldName\n    ) {\n        String description = (String) currentSourceRecord.get('Description');\n\n        if (String.isBlank(description)) {\n            return null;\n        }\n\n        Matcher matcher = EMAIL_PATTERN.matcher(description);\n        return matcher.find() ? matcher.group(1) : null;\n    }\n}"
  ],
  "tips": [],
  "relatedFormulas": []
}
